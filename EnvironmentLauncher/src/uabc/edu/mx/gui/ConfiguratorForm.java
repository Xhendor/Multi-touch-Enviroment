/*
 * 

 * Copyright (C)  2013 Rosendo R. Sosa. .
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 */
package uabc.edu.mx.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import uabc.edu.mx.data.session.SessionData;
import uabc.edu.mx.launcher.jabber.SingletonMyMessageProcesor;
import uabc.edu.mx.message.listener.MessageListener;
import uabc.edu.mx.message.Message;
import uabc.edu.mx.message.MessageType;
import uabc.edu.mx.data.multitouch.app.AppState;
import utils.Configuration;
import static utils.OSValidator.isMac;
import static utils.OSValidator.isWindows;
import utils.Tools;

/**
 *
 * @author Rosendo R. Sosa.
 */
public class ConfiguratorForm extends javax.swing.JFrame implements ActionListener, MessageListener {

    final ConfiguratorForm context;

    /**
     * Creates new form ConfiguratorForm
     */
    public ConfiguratorForm() {
        initComponents();
        SingletonMyMessageProcesor.getInstance().registerListener(this, this.getClass().getName());
        agregarApp.addActionListener((ActionListener) this);
        verApps.addActionListener((ActionListener) this);
        removerApp.addActionListener((ActionListener) this);
        ejecutarApp.addActionListener((ActionListener) this);
        exitMenuItem.addActionListener((ActionListener) this);
        configSesion.addActionListener(this);
        context = this;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        agregarApp = new javax.swing.JButton();
        verApps = new javax.swing.JButton();
        removerApp = new javax.swing.JButton();
        ejecutarApp = new javax.swing.JButton();
        configSesion = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        optionMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        agregarApp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/fadd.png"))); // NOI18N
        agregarApp.setText("Agregar Aplicacion");

        verApps.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/folder.png"))); // NOI18N
        verApps.setText("Seleccioinar Aplicación");
        verApps.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/res/folder.png"))); // NOI18N

        removerApp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/fremove.png"))); // NOI18N
        removerApp.setText("Remover Aplicacion");

        ejecutarApp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/config.png"))); // NOI18N
        ejecutarApp.setText("Ejecutar  Aplicacion");
        ejecutarApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ejecutarAppActionPerformed(evt);
            }
        });

        configSesion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/users.png"))); // NOI18N
        configSesion.setText("Configurar Sesion");

        optionMenu.setText("Opciones");

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Salir");
        optionMenu.add(exitMenuItem);

        jMenuBar1.add(optionMenu);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(76, 76, 76)
                .add(verApps)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(agregarApp)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(removerApp)
                .add(47, 47, 47))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(configSesion)
                .add(75, 75, 75)
                .add(ejecutarApp)
                .add(116, 116, 116))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(49, 49, 49)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(agregarApp)
                    .add(verApps)
                    .add(removerApp))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(configSesion)
                    .add(ejecutarApp))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ejecutarAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ejecutarAppActionPerformed
        // TODO add your handling code here:
        if (!Configuration.sessionDataToSend.getAppToRun().isEmpty() && !Configuration.configToLaunch.isEmpty()) {

            Set<String> keys = Configuration.configToLaunch.keySet();
            for (String object : keys) {
                Configuration.sessionDataToSend.setTableMTID(object + "@edumat");
                Configuration.sessionDataToSend.setState(AppState.LAUNCH);
                ArrayList<String> list = Configuration.configToLaunch.get(object);
                Configuration.sessionDataToSend.setUsersToAssign(list);
                SingletonMyMessageProcesor.getInstance().notifyMessage(Configuration.sessionDataToSend, this.toString(), this.toString(), MessageType.MESSAGE_SEND_APP_TO_SHOW);

            }

        } else {
            JOptionPane.showMessageDialog(this, "Configuración Invalida");
        }
    }//GEN-LAST:event_ejecutarAppActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConfiguratorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConfiguratorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConfiguratorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConfiguratorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ConfiguratorForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarApp;
    private javax.swing.JButton configSesion;
    private javax.swing.JButton ejecutarApp;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenu optionMenu;
    private javax.swing.JButton removerApp;
    private javax.swing.JButton verApps;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent ae) {

        if (ae.getSource() == agregarApp) {

            JFileChooser fc = new JFileChooser();
            fc.setFileFilter(new FileFilter() {
                @Override
                public boolean accept(File file) {

                    if (file.getName().endsWith(".zip")) {

                        return true;
                    }

                    return false;
                }

                @Override
                public String getDescription() {
                    return "Archivo ZIP";
                }
            });

            fc.showDialog(fc, "Selecciona paquete .zip");

            File selectedFile = fc.getSelectedFile();
            String path = null;
            if (selectedFile != null) {
                if (isWindows()) {
                    try {
                        path = "C:\\Users\\" + System.getProperty("user.name")
                                + "\\SparkleShare\\multitouch apps\\Applications\\";
                        Tools.extract(selectedFile, path);
                        JOptionPane.showMessageDialog(this, "Aplicacion agregada satisfactoraiamente.", "", JOptionPane.INFORMATION_MESSAGE);

                    } catch (Exception ex) {
                        Logger.getLogger(ConfiguratorForm.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else if (isMac()) {
                    try {
                        path = "/Users/" + System.getProperty("user.name")
                                + "/SparkleShare/multitouch apps/Applications/";
                        Tools.extract(selectedFile, path);
                        Tools.deleteFolder(path + "__MACOSX");
                        JOptionPane.showMessageDialog(this, "Aplicacion agregada satisfactoraiamente.", "", JOptionPane.INFORMATION_MESSAGE);

                    } catch (Exception ex) {
                        Logger.getLogger(ConfiguratorForm.class.getName()).log(Level.SEVERE, null, ex);
                    }


                }
            }
        } else if (ae.getSource() == verApps) {
            ListOfApplicationsDialog dialog = new ListOfApplicationsDialog(this, true);
            dialog.setVisible(true);
        } else if (ae.getSource() == removerApp) {
            ListOfApplicationsDialog dialog = new ListOfApplicationsDialog(this, true);
            dialog.setType(ListOfApplicationsDialog.REMOVE_APP);

            dialog.setVisible(true);

        } else if (ae.getSource() == ejecutarApp) {
        } else if (ae.getSource() == configSesion) {

            UserSelection select = new UserSelection(this, true);
            select.setSize(500, 500);
            select.setVisible(true);
        } else if (ae.getSource() == exitMenuItem) {

            int option = JOptionPane.showConfirmDialog(this, "¿Desea salir?", "Mensaje", JOptionPane.OK_CANCEL_OPTION);
            if (option == 0) {
                System.exit(0);
            }

        }

    }

    @Override
    public void messageReciever(Message msg) {
        switch (msg.getType()) {

            case MESSAGE_SEND_APP_TO_SHOW:
                SessionData data = (SessionData) msg.getBody();
                if (data.getState() == AppState.LAUNCH) {

                    ApplicationLaunchedMenu appMenu = new ApplicationLaunchedMenu(null, false);
                    appMenu.setVisible(true);
                   
                } else if (data.getState() == AppState.ERROR) {
                    JOptionPane.showMessageDialog(this, "Ocurrio un error al enviar la aplicacion.", "", JOptionPane.INFORMATION_MESSAGE);

                }
                break;

        }
    }
}
