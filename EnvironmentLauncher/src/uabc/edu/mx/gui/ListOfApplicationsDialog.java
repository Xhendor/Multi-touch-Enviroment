/*
 * 

 * Copyright (C)  2013 Rosendo R. Sosa. .
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 */
package uabc.edu.mx.gui;

import java.awt.Component;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreePath;
import uabc.edu.mx.data.multitouch.app.Descriptor;
import utils.Configuration;
import utils.OSValidator;
import static utils.OSValidator.*;
import utils.Tools;

/**
 *
 * @author Rosendo R. Sosa.
 */
public class ListOfApplicationsDialog extends javax.swing.JDialog implements TreeSelectionListener, ActionListener {

    public static int REMOVE_APP = 1;
    public static int EDIT_APP = 2;
    private final DynamicTree dynamicTree;
    private String path;
    private File appList;
    private File[] files;
    private int type;
    private DefaultMutableTreeNode currentNode;

    /**
     * Creates new form ListOfApplicationsDialog
     */
    public ListOfApplicationsDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        jButton2.setVisible(false);
        jButton1.setVisible(false);
        jButton1.addActionListener(this);
        jButton2.addActionListener(this);
        this.setTitle("Seleccione una aplicación.");

        if (isWindows()) {
            path = "C:\\Users\\" + System.getProperty("user.name")
                    + "\\SparkleShare\\multitouch apps\\Applications\\";

        } else if (isMac()) {

            path = "/Users/" + System.getProperty("user.name")
                    + "/SparkleShare/multitouch apps/Applications/";


        }
        appList = new File(path);
        if (appList.isDirectory()) {

            files = appList.listFiles();


        } else {
            System.out.println("No exist");
        }
        jLabel1.setText("");
        dynamicTree = new DynamicTree("Aplicaciones");
        dynamicTree.tree.setCellRenderer(new MyRenderer());
        this.jSplitPane1.setLeftComponent(dynamicTree);
        dynamicTree.tree.addTreeSelectionListener(this);
        populate(dynamicTree);


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        guardarBttn = new javax.swing.JMenuItem();
        cancelarBttn = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jSplitPane1.setDividerLocation(250);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("jLabel1");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel1.setSize(jPanel1.getSize().width, jPanel1.getSize().height);

        jButton1.setText("Mostrar LEEME");

        jButton2.setText("jButton2");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 123, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 122, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 327, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 26, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jButton2)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jButton1)))
        );

        jPanel1Layout.linkSize(new java.awt.Component[] {jButton1, jButton2}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jSplitPane1.setRightComponent(jPanel1);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Opciones");

        guardarBttn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        guardarBttn.setText("Guardar");
        guardarBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarBttnActionPerformed(evt);
            }
        });
        jMenu1.add(guardarBttn);

        cancelarBttn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cancelarBttn.setText("Cancelar");
        cancelarBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarBttnActionPerformed(evt);
            }
        });
        jMenu1.add(cancelarBttn);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelarBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarBttnActionPerformed

        this.dispose();

    }//GEN-LAST:event_cancelarBttnActionPerformed

    private void guardarBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarBttnActionPerformed


        TreePath currentSelection = dynamicTree.tree.getSelectionPath();
        if (currentSelection != null) {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) currentSelection.getLastPathComponent();
            if (!selectedNode.isRoot()) {
                Configuration.sessionDataToSend.setAppToRun(selectedNode.toString() + (OSValidator.isWindows() ? "\\" : "/") + selectedNode.toString() + ".jar");
                JOptionPane.showMessageDialog(this, "Configuración Guardada");
                dispose();
            } else {
                JOptionPane.showMessageDialog(this, "Seleccione una Aplicacion");

            }
        }

    }//GEN-LAST:event_guardarBttnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListOfApplicationsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListOfApplicationsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListOfApplicationsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListOfApplicationsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                ListOfApplicationsDialog dialog = new ListOfApplicationsDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem cancelarBttn;
    private javax.swing.JMenuItem guardarBttn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void valueChanged(TreeSelectionEvent tse) {


        TreePath currentSelection = dynamicTree.tree.getSelectionPath();

        if (currentSelection != null) {
            currentNode = (DefaultMutableTreeNode) (currentSelection.getLastPathComponent());

            if (currentNode != dynamicTree.rootNode) {
                try {
                    System.out.println(currentNode.toString());
                    System.out.println("Path:"+path + currentNode.toString() + "/" + currentNode.toString());
                    Descriptor desc = (Descriptor) Tools.objectFromJsonFile(path + currentNode.toString() + "/" + currentNode.toString() + ".json", Descriptor.class);
                    jLabel1.setText("<html><b>Autor: </b> " + desc.getAutor() + "<br><b>Nombre de aplicacíon: </b>" + desc.getAppName() + "<br><b>Version: </b>" + desc.getVersion() + "<br><b>Objetivo: </b>" + desc.getGoal() + "<br><b>Descripción: </b>" + desc.getDescription());

                    jButton1.setVisible(true);

                    if (getType() > 0) {
                        jButton2.setVisible(true);

                    }
                } catch (FileNotFoundException ex) {
                    JOptionPane.showMessageDialog(this, "No contiene documento LEEME.", "", JOptionPane.INFORMATION_MESSAGE);
                }

            } else {
                jLabel1.setText("");
                jButton1.setVisible(false);
                jButton2.setVisible(false);
            }


        }
    }

    public void setType(int type) {
        this.type = type;


        switch (type) {
            case 0:
                jButton2.setVisible(false);

                break;
            case 1:
                jButton2.setText("Remover");
                jMenuBar1.setVisible(false);
                break;
            case 2:
                jButton2.setText("Editar");
                jMenuBar1.setVisible(false);

                break;

        }



    }

    private void populate(DynamicTree tree) {


        if (files != null) {


            for (int i = 0; i < files.length; i++) {
                File file = files[i];

                if (file.isDirectory()&&Tools.extractedFolderIsValid(file)) {
                    tree.addObject(file.getName());
                }

            }
        }




    }

    @Override
    public void actionPerformed(ActionEvent ae) {


        if (ae.getSource() == jButton1) {
            if (currentNode != null) {
                if (currentNode != dynamicTree.rootNode) {
                    if (Desktop.isDesktopSupported()) {
                        try {
                            File readmeToOpen = new File(path + currentNode.toString() + (OSValidator.isWindows() ? "\\" : "/") + "leeme.txt");

                            Desktop.getDesktop().open(readmeToOpen);
                        } catch (Exception ex) {

                            JOptionPane.showMessageDialog(this, "No contiene documento LEEME.", "", JOptionPane.INFORMATION_MESSAGE);

                        }
                    } else {
                        System.out.println("Awt Desktop is not supported!");
                    }
                }
            }
        } else if (ae.getSource() == jButton2) {

            int value = JOptionPane.showConfirmDialog(this, "¿Desea borrar " + currentNode.toString() + "?", "Mensaje", JOptionPane.OK_CANCEL_OPTION);
            if (value == 0) {
                try {
                    Tools.deleteFolder(path + currentNode.toString());
                    dynamicTree.clear();
                    appList = new File(path);
                    if (appList.isDirectory()) {

                        files = appList.listFiles();
                        jLabel1.setText("");
                        jButton1.setVisible(false);
                        jButton2.setVisible(false);

                    } else {
                        System.out.println("No exist");
                    }

                    populate(dynamicTree);


                } catch (IOException ex) {
                    Logger.getLogger(ListOfApplicationsDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    /**
     * @return the type
     */
    public int getType() {
        return type;
    }

    class MyRenderer extends DefaultTreeCellRenderer {

        Icon tutorialIcon;

        @Override
        public Component getTreeCellRendererComponent(
                JTree tree,
                Object value,
                boolean sel,
                boolean expanded,
                boolean leaf,
                int row,
                boolean hasFocus) {

            super.getTreeCellRendererComponent(
                    tree, value, sel,
                    expanded, leaf, row,
                    hasFocus);

            DefaultMutableTreeNode node =
                    (DefaultMutableTreeNode) value;

            if (node.isRoot()) {
                tutorialIcon = new ImageIcon(this.getClass().getResource("/res/app.png"));
                setIcon(tutorialIcon);
            } else if (leaf && (node != dynamicTree.rootNode)) {
                tutorialIcon = new ImageIcon(path + value.toString() + (OSValidator.isWindows() ? "\\" : "/") + "logo_small.png");;
                setIcon(tutorialIcon);
            } else {
                setToolTipText(null); //no tool tip
            }

            return this;
        }
    }
}